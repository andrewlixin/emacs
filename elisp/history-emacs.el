(require 'cl)

(defvar max-file-history 40 "Max number of history items")
(defvar file-history-index 0 "Pointer to free history slot")
(defvar file-history-name-vector "History item slots")

(defvar file-history-db (format "%s%s%s" emacs-base system-path-separator "recent-files"))

(defun clear-history ()
  (interactive)
  (mapcar (lambda (file-name)
	    (if file-name
		(remove-menu-item file-name)))
	  file-history-name-vector)
  (setq file-history-name-vector (make-vector max-file-history nil))
  (setq file-history-index 0))

(defun open-all-history ()
  (interactive)
  (mapcar (lambda (file-name)
	    (if file-name
		(find-file file-name))) file-history-name-vector))

(defun file-history-init ()
  "Initialize file history menu"
  (define-key-after global-map [menu-bar History]
    (cons "History" (make-sparse-keymap "History")))
  (setq file-history-name-vector (make-vector max-file-history nil))
  (define-key global-map [menu-bar History open-all-history] '("Open all" . open-all-history))
  (define-key global-map [menu-bar History clear-history] '("Clear history" . clear-history))
  (define-key global-map [menu-bar History separator-replace-tags] '(menu-item "--"))
  (load-file-history))

(defun check-existing-file-history (file-name)
  (let (found
	(index 0))
    (while (and (< index max-file-history)
		(not found))
      (if (string= (aref file-history-name-vector index)
	      file-name)
	  (setq found t))
      (incf index))
    found))

(defun remove-menu-item (file-name)
  (let* ((keymap (lookup-key global-map [menu-bar History]))
	(index (- (length keymap) 2))
	(result (list (elt keymap (1+ index)))))
    (while (> index 0)
      (let ((item (elt keymap index)))
	(unless (string= (symbol-name (car item)) file-name)
	  (setq result (cons (elt keymap index) result))))
      (decf index))
    (setq result (cons 'keymap result))
    (define-key-after global-map [menu-bar History] (cons "History" result))
  ))

(defun add-to-file-history-menu (file-name)
  (let ((menu-item-action (list 'menu-item file-name
				`(lambda ()
				   (interactive)
				   (find-file ,file-name))))
	(new-menu-item (vector 'menu-bar 'History (make-symbol file-name)))
	(saved-file-name (aref file-history-name-vector file-history-index)))
    (unless (check-existing-file-history file-name)
      (if saved-file-name
	  (remove-menu-item saved-file-name))
      (define-key global-map new-menu-item menu-item-action)
      (aset file-history-name-vector file-history-index file-name)
      (setq file-history-index (mod (1+ file-history-index) max-file-history)))))

(defun add-to-file-history ()
  "Add one item to history menu"
  (cond ((eq major-mode 'dired-mode);;dired mode
	 )
	(t (let ((path (buffer-file-name)))
	     (if (and path (not (string= path file-history-db)))
		 (add-to-file-history-menu path))))))

(defun save-file-history ()
  (let ((buffer (find-file-noselect file-history-db))
	(index 0)
	file-name)
    (save-excursion
      (set-buffer buffer)
      (erase-buffer)
      (princ ";; Following are generated by emacs\n" buffer)
      (while (< index max-file-history)
	(setq file-name (aref file-history-name-vector (mod (+ index file-history-index) max-file-history)))
	(when file-name
	    (princ file-name buffer)
	    (princ "\n" buffer))
	(incf index))
      (save-buffer buffer)
      (kill-buffer buffer))))

(defun load-file-history ()
  (let ((buffer (find-file-noselect file-history-db))
	file-name
	file-names)
    (save-excursion
      (set-buffer buffer)
      (setq file-names (split-string (buffer-string) "\n"))
      (kill-buffer buffer)
      (mapcar (lambda (file-name)
		(when (and (> (length file-name) 0)
			   (not (string-equal (substring file-name 0 1) ";")))
		  (add-to-file-history-menu file-name)))
	      file-names))))

(file-history-init)

(add-hook 'kill-buffer-hook 'add-to-file-history)
(add-hook 'kill-emacs-hook 'save-file-history)
